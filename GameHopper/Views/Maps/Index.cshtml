@{
    ViewData["Title"] = "Google Maps Integration";
}

<h2>Google Maps Integration</h2>

<!-- Input field and button to search for places -->
<div>
    <label for="place-input">Search Places:</label>
    <input id="place-input" type="text" placeholder="Enter a place or 'coffee shops near me'" />
    <button id="search-button" type="button">Search</button>
</div>

<!-- Div to display the Google Map -->
<div id="map" style="height: 500px; width: 100%; margin-top: 10px;"></div>

<!-- Div to display detailed information about the selected place -->
<div id="place-details" style="margin-top: 10px;">
    <h3>Place Details</h3>
    <p id="place-name"></p>
    <p id="place-address"></p>
    <p id="place-phone"></p>
    <p id="place-website"></p>
    <p id="place-hours"></p>
</div>

@section Scripts {
    <!-- Function to handle Google Maps API authentication failures -->
    <script>
        function gm_authFailure() { 
            alert('Google Maps API authentication failure. Please check your API key and restrictions.');
        }
    </script>

    <!-- Load the Google Maps API with the necessary libraries and authentication key -->
    <script src="https://maps.googleapis.com/maps/api/js?key=@ViewBag.ApiKey&libraries=places&callback=initMap&onerror=gm_authFailure" async defer></script>

    <script>
        let map, markers = [], placesService, infoWindow;

        // Initialize the Google Map
        function initMap() {
            // Create a new map centered on San Francisco
            map = new google.maps.Map(document.getElementById('map'), {
                zoom: 14,
                center: { lat: 37.7749, lng: -122.4194 } // Default to San Francisco
            });

            // Initialize the Places service and InfoWindow
            placesService = new google.maps.places.PlacesService(map);
            infoWindow = new google.maps.InfoWindow();

            // Add event listener to the search button
            document.getElementById('search-button').addEventListener('click', function() {
                const query = document.getElementById('place-input').value;
                if (query.toLowerCase().includes('near me')) {
                    // If the query contains "near me", use geolocation to find the user's current position
                    if (navigator.geolocation) {
                        navigator.geolocation.getCurrentPosition(function(position) {
                            const pos = {
                                lat: position.coords.latitude,
                                lng: position.coords.longitude
                            };
                            map.setCenter(pos);
                            performNearbySearch(pos, query.replace('near me', '').trim());
                        }, function() {
                            alert('Error: The Geolocation service failed.');
                        });
                    } else {
                        alert('Error: Your browser doesn\'t support geolocation.');
                    }
                } else if (query.toLowerCase().includes('near ')) {
                    // If the query contains "near [location]", use the Places service to find the location
                    const location = query.split('near ')[1].trim();
                    performLocationBasedSearch(location, query.split(' near ')[0].trim());
                } else {
                    // Otherwise, perform a text search
                    performTextSearch(query);
                }
            });
        }

        // Perform a nearby search based on the user's current location and query
        function performNearbySearch(location, query) {
            const request = {
                location: location,
                radius: '5000', // 5 km radius
                keyword: query
            };

            placesService.nearbySearch(request, function(results, status) {
                if (status === google.maps.places.PlacesServiceStatus.OK && results) {
                    clearMarkers();
                    for (let i = 0; i < results.length; i++) {
                        createMarker(results[i]);
                    }
                } else {
                    alert('No results found');
                }
            });
        }

        // Perform a search for a location, then find nearby places based on the query
        function performLocationBasedSearch(location, query) {
            const request = {
                query: location,
                fields: ['geometry'],
            };

            placesService.findPlaceFromQuery(request, function(results, status) {
                if (status === google.maps.places.PlacesServiceStatus.OK && results && results[0].geometry) {
                    const loc = results[0].geometry.location;
                    map.setCenter(loc);
                    performNearbySearch(loc, query);
                } else {
                    alert('No results found for the location: ' + location);
                }
            });
        }

        // Perform a text search based on the user's query
        function performTextSearch(query) {
            const request = {
                query: query,
                fields: ['name', 'geometry'],
            };

            placesService.findPlaceFromQuery(request, function(results, status) {
                if (status === google.maps.places.PlacesServiceStatus.OK && results) {
                    clearMarkers();
                    for (let i = 0; i < results.length; i++) {
                        const place = results[i];
                        if (place.geometry.viewport) {
                            map.fitBounds(place.geometry.viewport);
                        } else {
                            map.setCenter(place.geometry.location);
                            map.setZoom(17);  // Zoom level 17 for better view
                        }
                        createMarker(place);
                    }
                } else {
                    alert('No results found');
                }
            });
        }

        // Create a marker on the map for a given place
        function createMarker(place) {
            const marker = new google.maps.Marker({
                map: map,
                position: place.geometry.location
            });
            markers.push(marker);

            // Add a click event listener to the marker to fetch and display place details
            google.maps.event.addListener(marker, 'click', function() {
                console.log("Marker clicked, place_id: ", place.place_id);
                getPlaceDetails(place.place_id);
            });
        }

        // Fetch detailed information about a place using the Places API
        function getPlaceDetails(placeId) {
            console.log("Fetching details for place_id: ", placeId);
            const request = {
                placeId: placeId,
                fields: ['name', 'formatted_address', 'formatted_phone_number', 'website', 'opening_hours']
            };

            placesService.getDetails(request, function(place, status) {
                console.log("Place details status: ", status);
                if (status === google.maps.places.PlacesServiceStatus.OK) {
                    document.getElementById('place-name').textContent = 'Name: ' + place.name;
                    document.getElementById('place-address').textContent = 'Address: ' + place.formatted_address;
                    document.getElementById('place-phone').textContent = 'Phone: ' + place.formatted_phone_number;
                    document.getElementById('place-website').innerHTML = 'Website: ' + (place.website ? `<a href="${place.website}" target="_blank">${place.website}</a>` : 'N/A');
                    document.getElementById('place-hours').textContent = 'Opening Hours: ' + (place.opening_hours ? place.opening_hours.weekday_text.join(', ') : 'N/A');
                } else {
                    alert('Details not found for this place.');
                }
            });
        }

        // Clear all markers from the map
        function clearMarkers() {
            for (let i = 0; i < markers.length; i++) {
                markers[i].setMap(null);
            }
            markers.length = 0;
        }

        // Initialize the map when the window loads
        window.onload = initMap;
    </script>
}
