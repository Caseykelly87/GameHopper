@using GameHopper
@model GameHopper.ViewModels.GameDetailsViewModel
@{
    ViewData["Title"] = Model.Game?.Title ?? "Game Details";
}

@if (Model.Game != null)
{
    <h1>@Model.Game.Title</h1>
    <h2>Category: @Model.Game.Category</h2>
    <h3>Tags: @if (Model.Game.Tags != null && Model.Game.Tags.Any())
                    {
                        @string.Join(", ", Model.Game.Tags.Select(t => t.Name))
                    }
                    else
                    {
                        <span>No Tags</span>
                    }
    </h3>

    <p><strong>Description:</strong> @Model.Game.Description</p>
    @* <p><strong>Address:</strong> @Model.Address @Model.Address2</p>
    <p><strong>State:</strong> @Model.State</p>
    <p><strong>Zip Code:</strong> @Model.Zip</p> *@


    @if (Model.Game.GamePicture != null)
    {
        <img src="data:image/jpeg;base64,@Convert.ToBase64String(Model.Game.GamePicture)" alt="Game Picture" style="max-width: 400px;" />
    }
    
    <div>@await Html.PartialAsync("_RequestPartial", new RequestViewModel
                    {
                        GameId = Model.Game.Id,
                        CurrentUser = Model.CurrentUser,
                        IsGameGM = Model.Game.GameMasterId == Model.CurrentUser,
                        CurrentPlayers = Model.Game.GamePlayers?.ToList() ?? new List<User>(),
                        Requests = Model.Game.Requests?.ToList() ?? new List<Request>(),
                        IsCurrentPlayer = (Model.Game.GamePlayers?.Any(p => p.Id == Model.CurrentUser) ?? false),
                        HasPendingRequest = (Model.Game.Requests?.Any(p => p.PlayerId == Model.CurrentUser) ?? false),
                    })</div>

}
else
{
    <p>Game details not available.</p>
}